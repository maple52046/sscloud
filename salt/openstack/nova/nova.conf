# OpenStack Nova configuration
[DEFAULT]
dhcpbridge_flagfile=/etc/nova/nova.conf
dhcpbridge=/usr/bin/nova-dhcpbridge
logdir=/var/log/nova
state_path=/var/lib/nova
lock_path=/var/lock/nova
force_dhcp_release=True
libvirt_use_virtio_for_bridges=True
verbose=True
ec2_private_dns_show_ip=True
api_paste_config=/etc/nova/api-paste.ini
enabled_apis=ec2,osapi_compute,metadata

rpc_backend = {{ salt['pillar.get']('openstack:nova:rpc:backend', 'rabbit') }}
auth_strategy = keystone

#my_ip = {{ grains['fqdn_ip4'][0] }}
vnc_enabled = True
vncserver_listen = 127.0.0.1
vncserver_proxyclient_address = 127.0.0.1
novncproxy_base_url = {{ salt['pillar.get']('openstack:public:protocol', 'http') }}://{{ salt['pillar.get']('openstack:public:domain', grains['fqdn_ip4'][0]) }}:{{ salt['pillar.get']("openstack:nova:novnc:port",{grains['host']:'6080'})[grains['host']] }}/vnc_auto.html
{% if salt['pillar.get']('openstack:public:protocol', 'http') == 'https' %}
ssl_only=true
cert={{ salt['pillar.get']('openstack:public:ssl:crt', '/etc/sscloud/ssl/sscloud.crt') }}
key={{ salt['pillar.get']('openstack:public:ssl:key', '/etc/sscloud/ssl/sscloud.key') }}
{% endif %}

network_api_class = nova.network.neutronv2.api.API
security_group_api = neutron
linuxnet_interface_driver = nova.network.linux_net.LinuxOVSInterfaceDriver
firewall_driver = nova.virt.firewall.NoopFirewallDriver

{% if salt['pillar.get']('openstack:nova:database:backend','mysql') in ['mysql','postgresql'] %}
[database]
connection = {{ salt['pillar.get']('openstack:nova:database:backend','mysql') }}://{{ salt['pillar.get']('openstack:nova:database:user', 'openstack') }}:{{ salt['pillar.get']('openstack:nova:database:password', 'sscloud-admin-2357') }}@{{ salt['pillar.get']('openstack:nova:database:host', salt['pillar.get']('database:host', ['localhost'])[0]) }}/{{ salt['pillar.get']('openstack:nova:database:name', 'nova') }}
{% endif %}

{% if salt['pillar.get']('openstack:nova:rpc:backend', 'rabbit') %}
[oslo_messaging_rabbit]
rabbit_host = {{ salt['pillar.get']('openstack:nova:rpc:host', salt['pillar.get']('rabbitmq:host',['localhost'])[0]) }}
rabbit_userid = {{ salt['pillar.get']('openstack:nova:rpc:user', salt['pillar.get']('rabbitmq:user', 'openstack')) }}
rabbit_password = {{ salt['pillar.get']('openstack:nova:rpc:password', salt['pillar.get']('rabbitmq:password','sscloud-admin-2357')) }}
{% endif %}

[keystone_authtoken]
auth_uri = {{ salt['pillar.get']('openstack:keystone:endpoint:internal', 'http://' + salt['pillar.get']('openstack:keystone:host', ['localhost'])[0] + ":5000/v2.0").split('/v2.0')[0] }}
auth_url = {{ salt['pillar.get']('openstack:keystone:endpoint:admin', 'http://' + salt['pillar.get']('openstack:keystone:host', ['localhost'])[0] + ":35357/v2.0").split('/v2.0')[0] }}
auth_plugin = password
project_domain_id = default
user_domain_id = default
project_name = {{ salt['pillar.get']('openstack:nova:auth:tenant', 'service') }}
username = {{ salt['pillar.get']('openstack:nova:auth:user', 'openstack') }}
password = {{ salt['pillar.get']('openstack:nova:auth:password', salt['pillar.get']('openstack:admin:token', 'sscloud-admin-2357')) }}

[glance]
host = {{ salt['pillar.get']('openstack:glance:host', ['localhost'])[0] }}

[oslo_concurrency]
lock_path = /var/lib/nova/tmp

[neutron]
url = {{ salt['pillar.get']('openstack:neutron:endpoint:admin', 'http://' + salt['pillar.get']('openstack:neutron:server', ['localhost'])[0] + ':9696' ) }}
auth_strategy = keystone
admin_auth_url = {{ salt['pillar.get']('openstack:keystone:endpoint:admin', 'http://' + salt['pillar.get']('openstack:keystone:host', ['localhost'])[0] + ":35357/v2.0") }}
admin_tenant_name = {{ salt['pillar.get']('opentack:neutron:auth:tenant', 'service') }}
admin_username = {{ salt['pillar.get']('openstack:neutron:auth:user', 'openstack') }}
admin_password = {{ salt['pillar.get']('openstack:neutron:auth:password', salt['pillar.get']('openstack:admin:token', 'sscloud-admin-2357')) }}
service_metadata_proxy = True
metadata_proxy_shared_secret = {{ salt['pillar.get']('openstack:nova:metadata:secret', 'sscloud-metadata') }}
